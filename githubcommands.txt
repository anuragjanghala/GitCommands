
git remote - show remote servers
git remote show origin - show detailed configuration (if exists)
git remote add origin URL(HTTPS or SSH)

git push - local data to remote repo
git push -u origin main - (-u)-> upstream
git push origin main - if we omit -u we have to use 'origin main' everytime we push to remote branch


this will only list local branches:
git branch -r - to list remote tracking branches
git branch -a - to list all branches (local, loacl tracking and remote tracking) (not remote branches)


for listing remote branches that doesn't have tracking branch in local:
git ls-remote



Now to get remote branch into local repo:
git fetch --dry-run
- option will perform a demo run of the command. It will output examples of actions it will take during the fetch but not apply them.
git fetch origin 
- is used to add changes to remote tracking branch in local repo so that later we can save it on our local branch
git fetch origin branch_name
- it will only fetch changes related to that specific branch

git pull <remote>
- Fetch the specified remote’s copy of the current branch and immediately merge it into the local copy. This is the same as git fetch ＜remote＞ followed by git merge origin/＜current-branch＞.
git pull 
- remote data to local repo if its linked with upstream
git pull --rebase origin
- This simply moves your local changes onto the top of what everybody else has already contributed.


ALL BRANCHES: remote, local, remote tracking, local tracking

remote branch -> (git fetch) -> remote tracking branch(uneditable branch) -> (git merge) -> local tracking branch

remote branch <- remote tracking branch(uneditable branch) <- (git push) <- local tracking branch



CREATING BRANCHS locally and remotely:
how to create a local tracking branch which will connect to remote taracking branch specified
git branch --track 'branch_name' origin/'branch_name'

after connecting we dont need to put 'origin remote_branch_name' everytime when we fetch/pull/push.

So the basic difference between local branch and local tracking branch is:
local tracking branches are connected to remote branches through remote tracking branches.
and we can check that with command:
git branch -vv 
- it will show us the connected all local and local tracking branches.

once we connect local and remote tracking branches we dont need to put 'origin branchname' in commands. 

If we create a local branch then we have to push that to remote repo:
git push origin 'branch_name'

If we created a local feature branch and pushed it using
git push origin feature

it wont connect to tracking branch so to do that we can use
git branch --set-upstream-to=origin/feature feature 
- this will create a upstream connection with the remote branch.

another way : if we have a remote feature branch but dont have a local branch
git branch --track feature origin/feature 
- this will create a new branch named feature connect to remote branch.

if we use -u while pushing a local branch to remote it will automatically convert local branch into a local tarcking branch linked to remote tracking branch.






DELTETING BRANCHES locally and remotely:
using this command we can delete local branch which is connected to upstream:
git branch -d/-D branch_name

now to delete remote tracking branches:
git branch --delete --remotes origin/branch_name
- this wont affect the remote banches we can check that using git ls-remote

now to delete remote branches:
git push origin --delete branch_name
- this can also delete remote tracking branch of that deleted branch so dont need to do that manually using 'git branch --delete --remotes origin/branch_name' command.



DELETING A COMMIT REMOTELY:
Now if we want to delete a commit locally and remotely:
git reset --hard HEAD~1
- this will delete the commit and will change the head of local branch to previous commit but origin/branch head will stay the same

now we need to push these changes to remote origin to delete that commit from origin as well:
(git push) wont work as we are behind locally from origin branch which can lead to problems
but still we want to delete we can force that.
git push --force
- this will only work if upstream is setup to remote branch otherwise we need to use
git push --force origin "branch_name"

if we want to delete a commit that has already been pushed but other team members are working on it, So it can cause problem if we delete it using force command. It might create a problem of history loss for other working over that commit.
so to deal with that we can use:
git revert "HASH_ID_OF_COMMIT"
- it will create a revert commit on that specific commit without affect other commits in the history and wont create problem for those who are working with that commit.


If we want to remove some commited files/folders like node_modules from remote. As if we add them in .gitignore in local and commit it, it wont affect that as git is tracking them from remote. So to remove them from tracking so that we can delete them from remote and put them in gitignore.
we can use:
git rm -r --cached "file_name/folder_name"



